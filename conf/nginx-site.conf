# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Define pools as backends so we can fall back to the other pool
# if the default is broken for some reason.
upstream backend_www {
	server unix:/var/run//php/php7.1-fpm.sock;
	server unix:/var/run/php/php7.1-fpm-images.sock backup;
}

upstream backend_images {
	server unix:/var/run/php/php7.1-fpm-images.sock;
	server unix:/var/run/php/php7.1-fpm.sock backup;
}

server {
	listen   8080; ## listen for ipv4; this line is default and implied
	listen   [::]:8080 default_server; ## listen for ipv6

	listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default_server; ## listen for ipv6

	root /usr/share/nginx/www;
	index index.php index.html index.htm;

	# Optional HTTPS
	listen   8443 ssl;
	listen   [::]:8443 default_server ssl;  ## listen for ipv6

	listen   443 ssl;
	listen   [::]:443 default_server ssl; ## listen for ipv6

	ssl_certificate /usr/local/etc/ssl/koken.crt;
	ssl_certificate_key /usr/local/etc/ssl/koken.key;

	#ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:10m;

	# Make site accessible from http://localhost/
	server_name localhost;

	# Enable gzip. Highly recommending for best peformance
	gzip on;
	gzip_comp_level 6;
	gzip_types text/css text/javascript application/json application/javascript application/x-javascript;

	# By default, do not set expire headers
	expires 0;

	# Set expires header for console CSS and JS.
	# These files are timestamped with each new release, so it is safe to cache them agressively.
	location ~ "console_.*\.(js|css)$" {
		expires max;
	}

	# Catch image requests and pass them back to PHP if a cache does not yet exist
	location ~ "^/storage/cache/images(/(([0-9]{3}/[0-9]{3})|custom)/.*)$" {
		# Cached images have timestamps in the URL, so it is safe to set
		# aggresive cache headers here.
		expires max;
		try_files $uri /i.php?path=$1;
	}

	# Catch .css.lens requests and serve cache when possible
	location ~ "(lightbox-)?settings.css.lens$" {
		default_type text/css;
		try_files /storage/cache/site/${uri} /app/site/site.php?url=/$1settings.css.lens;
	}

	# Catch koken.js requests and serve cache when possible
	location ~ koken.js$ {
		default_type text/javascript;
		try_files /storage/cache/site/${uri} /app/site/site.php?url=/koken.js;
	}

	# Standard site requests are cached with .html extensions
	set $cache_ext 'html';

	# PJAX requests contain the _pjax GET parameter and are cached with .phtml extensions
	if ($arg__pjax) {
		set $cache_ext 'phtml';
	}

	if ($request_method != 'GET') {
		set $cache_ext 'nocache';
	}

	# If share_to_tumblr cookie is preset, disable caching (long story)
	if ($http_cookie ~* "share_to_tumblr" ) {
		set $cache_ext 'nocache';
	}

	# Prevent web requests to Koken's .cache files
	location ~ .cache$ {
		deny all;
	}

	# Catch root requests
	location = / {
		try_files /index.html /storage/cache/site/index/cache.$cache_ext @koken;
	}

	# All other requests get passed back to Koken unless file already exists
	location / {
		try_files $uri $uri/ /storage/cache/site/${uri} /storage/cache/site/${uri}cache.$cache_ext @koken;
	}

	location @koken {
		try_files /installer.php /app/site/site.php?url=$uri&$args;
		fastcgi_pass backend_www;
		include fastcgi.conf;
	}

	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /usr/share/nginx/www;
	}

	# pass image processing to another PHP pool
	location = /i.php {
		try_files $uri =404;
		fastcgi_pass backend_images;
		include fastcgi.conf;
	}

	# Catch albums requests and pass them back to PHP if a cache does not yet exist
	location ~ "^/storage/cache/albums(/([0-9]{3}/[0-9]{3})/.*)$" {
		# Cached albums have timestamps in the URL, so it is safe to set
		expires max;
		try_files $uri /a.php?path=$1;
	}

	# pass all other PHP requests to main backend
	location ~ \.php$ {
		try_files $uri =404;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass backend_www;
		fastcgi_index index.php;
		include fastcgi.conf;
	}
}
